# 🚀 Synapse Development Guide for Bolt.diy

## Initial Setup Command
```bash
# Clone our base configuration
git clone https://github.com/alexandrec0sta/synapse.git
cd synapse
```

## 🎯 Project Architecture

```typescript
const synapseArchitecture = {
  frontend: {
    framework: "Next.js 14",
    styling: {
      base: "Tailwind CSS",
      components: "shadcn/ui",
      animations: "Framer Motion",
      icons: "Lucide Icons"
    },
    state: {
      local: "Zustand",
      server: "TanStack Query v5"
    },
    auth: "Clerk",
    features: [
      "Real-time chat",
      "File attachments",
      "Code highlighting",
      "Command palette",
      "Dark mode"
    ]
  },
  backend: {
    api: "FastAPI",
    database: {
      primary: "Supabase",
      vector: "Qdrant",
      cache: "Upstash Redis"
    },
    ai: {
      primary: "DeepSeek",
      backup: ["Claude", "GPT-4"],
      embeddings: "text-embedding-3-small"
    },
    monitoring: {
      metrics: "Grafana",
      logging: "Axiom",
      tracing: "OpenTelemetry"
    }
  }
}
```

## 📦 Dependencies to Install

```json
{
  "dependencies": {
    // Core
    "next": "14.0.4",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    
    // UI & Styling
    "tailwindcss": "^3.4.0",
    "shadcn-ui": "latest",
    "framer-motion": "^10.17.0",
    "lucide-react": "^0.303.0",
    
    // State & Data
    "zustand": "^4.4.7",
    "@tanstack/react-query": "^5.15.0",
    
    // Auth & Security
    "@clerk/nextjs": "^4.28.1",
    
    // Database & Cache
    "@supabase/supabase-js": "^2.39.1",
    "upstash/redis": "^1.28.2",
    
    // AI & Chat
    "ai": "^2.2.31",
    "openai": "^4.24.1",
    "anthropic": "^0.8.1",
    
    // Utils
    "zod": "^3.22.4",
    "date-fns": "^3.0.6",
    "nanoid": "^5.0.4"
  },
  "devDependencies": {
    "typescript": "^5.3.3",
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "eslint": "^8.56.0",
    "prettier": "^3.1.1"
  }
}
```

## 🔐 Environment Setup

```env
# App
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Auth
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...

# Database
NEXT_PUBLIC_SUPABASE_URL=your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Redis
UPSTASH_REDIS_REST_URL=https://your-url.upstash.io
UPSTASH_REDIS_REST_TOKEN=your-token

# AI
DEEPSEEK_API_KEY=your-key
ANTHROPIC_API_KEY=your-key
OPENAI_API_KEY=your-key

# Monitoring
AXIOM_TOKEN=your-token
NEXT_PUBLIC_POSTHOG_KEY=your-key
```

## 📁 Directory Structure

```bash
src/
├── app/                    # Next.js app router
│   ├── (auth)/            # Auth routes (login/signup)
│   ├── (dashboard)/       # Protected dashboard routes
│   ├── api/               # API routes
│   └── chat/             # Chat interface
├── components/            # React components
│   ├── ui/               # shadcn/ui components
│   ├── chat/             # Chat components
│   └── shared/           # Shared components
├── lib/                   # Shared utilities
│   ├── supabase.ts       # Supabase client
│   ├── redis.ts          # Redis client
│   └── ai.ts             # AI utilities
├── hooks/                # Custom hooks
├── store/                # Zustand stores
└── types/                # TypeScript types
```

## 🎨 Component Architecture

```typescript
// Example Chat Component Structure
interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  attachments?: Attachment[]
}

interface ChatStore {
  messages: Message[]
  isLoading: boolean
  error: Error | null
  sendMessage: (content: string) => Promise<void>
  attachFile: (file: File) => Promise<void>
}

// Zustand Store
const useChatStore = create<ChatStore>((set) => ({
  messages: [],
  isLoading: false,
  error: null,
  sendMessage: async (content) => {
    set({ isLoading: true })
    try {
      // Implementation
    } catch (error) {
      set({ error })
    } finally {
      set({ isLoading: false })
    }
  }
}))
```

## 🔄 Development Workflow

1. **Initial Setup**
   ```bash
   # Clone and install
   git clone https://github.com/alexandrec0sta/synapse.git
   cd synapse
   pnpm install
   
   # Setup environment
   cp .env.example .env.local
   
   # Start development
   pnpm dev
   ```

2. **Database Setup**
   ```sql
   -- Supabase schema
   create table public.chat_sessions (
     id uuid default gen_random_uuid() primary key,
     user_id text not null references auth.users,
     title text,
     created_at timestamp with time zone default timezone('utc'::text, now()),
     updated_at timestamp with time zone default timezone('utc'::text, now())
   );

   create table public.messages (
     id uuid default gen_random_uuid() primary key,
     session_id uuid references public.chat_sessions on delete cascade,
     role text not null check (role in ('user', 'assistant')),
     content text not null,
     created_at timestamp with time zone default timezone('utc'::text, now())
   );
   ```

3. **API Integration**
   ```typescript
   // Example API route
   import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
   import { cookies } from 'next/headers'
   
   export async function POST(req: Request) {
     const supabase = createRouteHandlerClient({ cookies })
     const { content } = await req.json()
     
     const { data, error } = await supabase
       .from('messages')
       .insert([{ content, role: 'user' }])
       .select()
       
     if (error) throw error
     return Response.json(data)
   }
   ```

## 🎯 Development Priorities

1. **Phase 1: Core Setup**
   - Next.js 14 app setup
   - Clerk authentication
   - Supabase integration
   - Basic UI components

2. **Phase 2: Chat Interface**
   - Real-time messaging
   - Message persistence
   - File attachments
   - Code highlighting

3. **Phase 3: AI Integration**
   - DeepSeek integration
   - Streaming responses
   - Context management
   - Memory system

4. **Phase 4: Advanced Features**
   - Command palette
   - Dark mode
   - Mobile optimization
   - Performance monitoring

## 🧪 Testing Strategy

```typescript
// Example test setup
import { render, screen } from '@testing-library/react'
import { ChatWindow } from '@/components/chat/ChatWindow'

describe('ChatWindow', () => {
  it('renders messages correctly', () => {
    render(<ChatWindow />)
    expect(screen.getByRole('log')).toBeInTheDocument()
  })
})
```

## 📈 Monitoring Setup

```typescript
// Telemetry setup
const telemetry = {
  metrics: [
    'message_count',
    'response_time',
    'token_usage',
    'error_rate'
  ],
  logs: {
    level: 'info',
    format: 'json'
  },
  alerts: {
    error_threshold: 0.01,
    latency_threshold: 1000
  }
}
```

## 🚀 Deployment

```bash
# Build and deploy
pnpm build
pnpm deploy
```

## Special Instructions for Bolt.diy

1. **Initial Setup**
   - Use the git clone command to get our base structure
   - Install all dependencies in one go
   - Set up environment variables

2. **Development Flow**
   - Start with core components
   - Use shadcn/ui for base components
   - Implement features incrementally
   - Test each feature before moving on

3. **Integration Points**
   - Connect to existing FastAPI backend
   - Use Supabase for data storage
   - Implement Clerk auth flows
   - Set up monitoring

4. **Key Features**
   - Real-time chat with streaming
   - File attachments and previews
   - Code editing and execution
   - Context-aware responses

Remember to use Bolt.diy's enhance prompt feature before submitting each major change!

# 🚀 Synapse Development Guide for Bolt.diy

## Bolt.diy Implementation Strategy

1. **Initial Repository Setup**
```bash
git clone https://github.com/alex19correia/Synapse_Bolt.git
cd synapse
```

2. **Core Development Flow**
- Start with authentication
- Build chat interface
- Implement AI integration
- Add advanced features

3. **Key Integration Points**
- FastAPI backend connection
- Supabase data layer
- Clerk authentication
- Monitoring setup

4. **Feature Priority**
- Real-time chat
- File handling
- Code execution
- Context management
