import { chromium, FullConfig } from '@playwright/test';

async function globalTeardown(config: FullConfig) {
  const { baseURL } = config.projects[0].use;
  
  // Criar browser
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  
  console.log('\nüßπ Iniciando limpeza do ambiente...');
  
  // Limpar dados de teste
  try {
    await page.goto(`${baseURL}/api/test/cleanup`);
    console.log('‚úÖ Dados de teste removidos com sucesso');
  } catch (error) {
    console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar dados de teste');
  }
  
  // Limpar cache do Redis
  try {
    await page.goto(`${baseURL}/api/test/clear-cache`);
    console.log('‚úÖ Cache limpo com sucesso');
  } catch (error) {
    console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar o cache');
  }
  
  // Remover arquivos tempor√°rios
  try {
    await page.goto(`${baseURL}/api/test/clear-temp`);
    console.log('‚úÖ Arquivos tempor√°rios removidos');
  } catch (error) {
    console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover arquivos tempor√°rios');
  }
  
  // Remover usu√°rios de teste
  try {
    await page.goto(`${baseURL}/api/test/clear-users`);
    console.log('‚úÖ Usu√°rios de teste removidos');
  } catch (error) {
    console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover usu√°rios de teste');
  }
  
  // Limpar storage state
  try {
    await context.clearCookies();
    console.log('‚úÖ Cookies limpos com sucesso');
  } catch (error) {
    console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar cookies');
  }
  
  // Fechar browser
  await browser.close();
  
  console.log('\nüéâ Limpeza conclu√≠da com sucesso!\n');
}

export default globalTeardown; 