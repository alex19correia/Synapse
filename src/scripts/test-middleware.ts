import axios from 'axios';

async function testMiddleware() {
    const API_URL = 'http://localhost:3000/api';
    // Token v√°lido do Clerk (deve ser obtido do ambiente)
    const CLERK_TOKEN = process.env.CLERK_TEST_TOKEN;
    
    console.log('üß™ Iniciando testes do middleware...\n');

    // Teste 1: Rota n√£o autenticada
    try {
        console.log('Teste 1: Tentando acessar rota protegida sem autentica√ß√£o...');
        await axios.get(`${API_URL}/protected`);
    } catch (error: any) {
        console.log('‚úÖ Erro esperado:', error.response.status);
    }

    // Teste 2: Rate Limiting
    console.log('\nTeste 2: Testando rate limiting...');
    const requests = Array(110).fill(null);
    let rateLimited = false;

    try {
        await Promise.all(
            requests.map(async () => {
                try {
                    await axios.get(`${API_URL}/public`);
                } catch (error: any) {
                    if (error.response.status === 429) {
                        rateLimited = true;
                    }
                }
            })
        );

        console.log('‚úÖ Rate limiting funcionando:', rateLimited);
    } catch (error) {
        console.log('‚ùå Erro no teste de rate limiting:', error);
    }

    // Teste 3: Autentica√ß√£o com token v√°lido
    try {
        console.log('\nTeste 3: Testando autentica√ß√£o com token v√°lido...');
        if (!CLERK_TOKEN) {
            console.log('‚ö†Ô∏è CLERK_TEST_TOKEN n√£o encontrado no ambiente. Pulando teste de autentica√ß√£o.');
            return;
        }

        const response = await axios.get(`${API_URL}/protected`, {
            headers: {
                Authorization: `Bearer ${CLERK_TOKEN}`
            }
        });
        console.log('‚úÖ Autentica√ß√£o funcionando:', response.status === 200);
    } catch (error) {
        console.log('‚ùå Erro no teste de autentica√ß√£o:', error);
    }
}

testMiddleware().catch(console.error); 